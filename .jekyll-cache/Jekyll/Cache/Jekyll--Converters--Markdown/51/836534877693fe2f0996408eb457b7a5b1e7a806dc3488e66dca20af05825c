I"0<h3 id="迭代器模式">迭代器模式</h3>
<p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
(它提供一种方法访问一个容器对象中各个元素,而又不需暴露该对象的内部细节。)</p>
<h3 id="通用类图">通用类图</h3>
<p>抽象迭代器类，定义访问和遍历元素的接口
具体迭代器类，继承抽象迭代器类，实现接口方法，与具体容器类关联
抽象容器类，提供创建具体迭代器的接口
具体容器类，继承抽象容器类，实现方法，创建初容纳迭代器的对象，使用具体迭代器类</p>
<h3 id="通用源码">通用源码</h3>
<p>```
//抽象迭代器类
template <typename T="">
class Iterator {
public:
    virtual T next() = 0;
    virtual booleam remove() = 0;
    virtual booleam hasxNext() = 0;
};
//具体迭代器类
template <typename T="">
class ConcreteIterator: public Iterator {
public:
    ConcreteIterator(vector<T> v): vt(v) { }
    booleam hasxNext() {
        if(cursor == vt.size()) return false;
        else return true;
    }
    T next() {
        T t;
        if(hasxNext()) t = vt[cursor++];
        return t;
    }
    booleam remove() {
        vt.erase(vt.begin()+cursor++);
        return true;
    }</T></typename></typename></p>
:ET